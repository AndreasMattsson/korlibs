buildscript {
	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlinNativeVersion"
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
	}

	//ext.nativeTargets = ['iphone', 'iphone_sim', 'macbook', 'linux', 'raspberrypi', 'android_arm32', 'android_arm64']
	ext.nativeTargets = ['macbook']
	ext.libDependencies = [
			"sample1": ["com.soywiz:korge{SUFFIX}:$korgeVersion"],
	]
	ext.libExecutables = [
	        "sample1": true
	]
}

allprojects {
	def isJs = project.name.endsWith("-js")
	def isJvm = project.name.endsWith("-jvm")
	def isNative = project.name.endsWith("-native")
	def isCommon = project.name.endsWith("-common")
	def isKotlin = isJs || isJvm || isNative || isCommon

	String suffix = ""
	String jsuffix = ""
	String projectNameWithoutSuffix = project.name[0..<project.name.lastIndexOf('-')]

	if (isJs) jsuffix = suffix = "-js"
	if (isJvm) {
		suffix = "-jvm"; jsuffix = ""
	}
	if (isNative) jsuffix = suffix = "-native"
	if (isCommon) jsuffix = suffix = "-common"

	ext.suffix = suffix
	ext.jsuffix = jsuffix

	if (suffix != "") {
		apply plugin: "kotlin-platform$suffix"
	}
	if (!isNative) {
		apply plugin: "java"
	}

	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
		mavenCentral()
	}

	dependencies {
		if (isKotlin && !isNative) {
			compile "org.jetbrains.kotlin:kotlin-stdlib${jsuffix}:$kotlinVersion"

			testCompile "org.jetbrains.kotlin:kotlin-test${jsuffix}:$kotlinVersion"
			//testCompile "org.jetbrains.kotlin:kotlin-test-annotations${jsuffix}:$kotlinVersion"
		}
		if (isJvm) {
			testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
			testCompile "junit:junit:4.12"
		}

		if (isKotlin) {
			//println("----")
			if (!isCommon) {
				def expect = ":${projectNameWithoutSuffix}-common"
				expectedBy project(expect)
				if (!isNative) {
					testImplementation project(expect)
				}
				//println("EXP: ${project.name}: ${expect}")
			}

			for (String dep in libDependencies[projectNameWithoutSuffix]) {
				String rdep = dep.replace("{SUFFIX}", suffix).replace("{JSUFFIX}", jsuffix)
				def rdepm
				if (dep.contains(":")) {
					rdepm = rdep
				} else {
					rdepm = project(":${rdep}${suffix}")
				}
				//println("DEP: ${project.name}: ${rdepm}")
				if (isNative) {
					implementation rdepm
				} else {
					compile rdepm
				}
			}
		}

		sourceSets {
			if (isKotlin) {
				main.kotlin.srcDirs += "src"
				test.kotlin.srcDirs += "test"
				if (!isNative) {
					main.resources.srcDirs += "resources"
					test.resources.srcDirs += "testresources"
				}
				if (!isCommon && !isNative) {
					// @TODO: @BUG: Hack. No common resources are copied
					main.resources.srcDirs += ['../common/resources']
					test.resources.srcDirs += ['../common/testresources']
				}

				if (isNative) {
					main {
						component {
							target nativeTargets
							if (libExecutables[projectNameWithoutSuffix]) {
								outputKinds = [EXECUTABLE]
							} else {
								outputKinds = [KLIBRARY]
							}
						}
					}
				}
			}
		}

		if (isKotlin && !isNative) {
			kotlin.experimental.coroutines 'enable'
		}
	}
}
