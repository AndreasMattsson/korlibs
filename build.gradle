import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	ext.projectVersion = '0.25.0'

	ext.kotlinVersion = '1.2.41'
	//ext.kotlinVersion = '1.2.31'
	ext.kotlinNativeVersion = '0.7.1'
	ext.joglVersion = '2.3.2'
	ext.gluegenVersion = '2.3.2'

	ext.projectGroup = 'com.soywiz'
	ext.projectHost = 'github'
	ext.projectOrg = 'korlibs'
	ext.projectLicense = 'MIT'
	ext.projectDevelNick = 'soywiz'
	ext.projectDevelName = 'Carlos Ballesteros Velasco'
	ext.projectInceptionYear = 2017

	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlinNativeVersion"
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
	}
}

allprojects {
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'maven-publish'
	apply plugin: 'idea'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'java'

	group projectGroup
	version projectVersion

	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
	}

	it.afterEvaluate {
		if (it.plugins.hasPlugin("kotlin-platform-common")) {
			dependencies {
				compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
			}

			kotlin {
				experimental { coroutines 'enable' }
			}
		}
		if (it.plugins.hasPlugin("kotlin-platform-jvm") || it.plugins.hasPlugin("kotlin")) {
			dependencies {
				compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
				testCompile "junit:junit:4.12"
			}

			kotlin {
				experimental { coroutines 'enable' }
			}

			compileJava.options.encoding = 'UTF-8'
			compileTestJava.options.encoding = 'UTF-8'

			sourceCompatibility = 1.7
			targetCompatibility = 1.7
		}

		if (it.plugins.hasPlugin("kotlin-platform-js") || it.plugins.hasPlugin("kotlin2js")) {
			dependencies {
				compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
			}

			kotlin {
				experimental { coroutines 'enable' }
			}

			[compileKotlin2Js, compileTestKotlin2Js]*.configure {
				kotlinOptions.moduleKind = "umd"
				kotlinOptions.sourceMap = true
			}

			project.task(type: Copy, dependsOn: compileKotlin2Js, 'populateNodeModules') {
				from compileKotlin2Js.destinationDir

				configurations.testCompile.each {
					from zipTree(it.absolutePath).matching { include '*.js' }
				}

				into "${buildDir}/node_modules"
			}

			project.task(type: Task, dependsOn: [compileTestKotlin2Js, populateNodeModules], 'fixJsForAsync') {
				doLast {
					def k2jsOutputFile = compileTestKotlin2Js.outputFile
					File file = (k2jsOutputFile instanceof File) ? k2jsOutputFile : new File("$k2jsOutputFile")
					if (file.exists()) {
						File fileOut = new File(file.absolutePath + ".fix.js")
						def timeout = 2000
						fileOut.text = file.text.replaceAll(/(?m)(?s)test\('(.*?)', (false|true), function \(\) \{\s*(.*?);\s*\}\);/) { c ->
							String name = c[1]
							String disabled = c[2]
							String body = c[3]
							def rbody = body.startsWith("return") ? body.substring(6) : body
							return 'test("' + name + '", ' + disabled + ', function() { this.timeout(' + timeout + '); global.testPromise = null; var res = (' + rbody + ') || (global.testPromise); return (res instanceof Promise) ? res : undefined; });'
						}
					}
				}
			}

			project.task(type: Task, dependsOn: [fixJsForAsync], 'runMocha') {
				doLast {
					def k2jsOutputFile = compileTestKotlin2Js.outputFile
					File fileOut = (k2jsOutputFile instanceof File) ? k2jsOutputFile : new File("$k2jsOutputFile")

					if (fileOut.exists()) {
						String[] cmd
						if (Os.isFamily(Os.FAMILY_WINDOWS)) {
							cmd = ["cmd", "/c", "mocha.cmd" as String, "${fileOut}.fix.js"]
						} else {
							cmd = ["/bin/bash", '-c', "mocha '${fileOut}.fix.js'"]
						}

						if (project.hasProperty('projectNodeModules')) {
							for (nodeModule in projectNodeModules) {
								if (!(new File("$buildDir/node_modules/$nodeModule")).exists()) {
									executeShell("npm link $nodeModule", buildDir)
								}
							}
						}

						ProcessBuilder pb = new ProcessBuilder(cmd as String[])
						pb.environment().putAll(System.getenv())
						pb.directory(new File("$buildDir/node_modules"))
						def p = pb.start()
						p.in.eachLine { System.out.println(it) }
						p.err.eachLine { System.err.println(it) }
						if (p.waitFor() != 0) {
							throw new GradleException('error occurred running ' + cmd)
						}
					}
				}
			}

			// @TODO: Enable mocha again!
			//test.dependsOn runMocha
		}
	}

	afterEvaluate {
		project.configure(project) {
			task(type: Jar, 'javadocJar') {
				classifier = 'javadoc'
				from 'build/docs/javadoc'
			}

			task(type: Jar, 'sourcesJar') {
				classifier = 'sources'
				from sourceSets.main.allSource
				if (project != rootProject) {
					if (!plugins.hasPlugin("kotlin-platform-common")) {
						ProjectDependency pd = (ProjectDependency) (configurations
								.findByName("expectedBy")?.dependencies
								?.find { it instanceof ProjectDependency })
						if (pd != null) {
							from pd.dependencyProject.sourceSets.main.allSource
						}
					}
				}
			}

			artifacts {
				archives javadocJar
				archives sourcesJar
			}
		}
	}

	publishing {
		publications {
			MyPublication(MavenPublication) {
				from components.java
				groupId project.group
				artifactId project.name
				version "$project.version"
			}
		}
	}

	tasks.withType(Test) {
		testLogging {
			showStandardStreams = true
			events "passed", "failed"
		}
	}

	// gradle bintrayUpload
	if (rootProject.hasProperty('BINTRAY_USER') && rootProject.hasProperty('BINTRAY_KEY')) {
		bintray {
			user = rootProject.property('BINTRAY_USER')
			key = rootProject.property('BINTRAY_KEY')
			publications = ['MyPublication']
			publish = true
			override = true

			pkg {
				repo = "soywiz"
				name = "korlibs"
				userOrg = 'soywiz'
				licenses = ['Apache-2.0']
				vcsUrl = 'https://github.com/korlibs/korlibs-all.git'
			}
		}
	}
}

static String executeShell(String cmd, File dir = null) {
	def out = new StringBuilder()
	def err = new StringBuilder()
	def acmd

	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		acmd = "cmd /c $cmd"
	} else {
		acmd = cmd
	}
	def res
	if (dir != null) {
		res = acmd.execute((String[]) null, dir)
	} else {
		res = acmd.execute()
	}
	res.waitForProcessOutput(out, err)
	//println("out: $out")
	//println("err: $err")
	return out.toString()
}


static String capitalize(String str) { return str[0].toUpperCase() + str[1..-1] }
