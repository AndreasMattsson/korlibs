rootProject.name = 'korlibs-all'

enableFeaturePreview('GRADLE_METADATA')

def nativeEnabled() {
	return System.getenv("build_kotlin_native") == "true"
}

def registerVersion(artifactName, path) {
	def fpath = path as File
	if (fpath.exists()) {
		include ":$artifactName"
		findProject(":$artifactName")?.projectDir = fpath
	}
}

@SuppressWarnings("unused")
def registerProject1(name, desc, rootPath = name) {
	registerVersion("$name-common", file("$rootPath/$name/common"))
	registerVersion("$name-jvm", file("$rootPath/$name/jvm"))
	registerVersion("$name-js", file("$rootPath/$name/js"))
	if (nativeEnabled()) {
		registerVersion("$name-native", file("$rootPath/$name/native"))
	}
}

def registerProject2(name, rootPath, desc) {
	registerProject1(name, desc, rootPath)
}

def registerProject2Jvm(name, rootPath, desc) {
	include ":$name"
	findProject(":$name")?.projectDir = file("$name")
}

// Generator
registerProject2Jvm('korlibs-generator-jvm', 'korlibs-generator-jvm', 'korlibs-generator: Generates some classes')

// Zero. This should be in the kotlin-commn stdlib.
registerProject1('korlibstd', 'korlibsstd: Common utilities required for all the projects')

// First set without dependencies
registerProject1('kds', 'Kds: Kotlin Data Structures for JVM, JS and Common')
registerProject1('klock', 'Klock: Consistent and portable date and time utilities for multiplatform kotlin')
registerProject1('klogger', 'Klogger: Consistent and portable logger library for multiplatform kotlin')
registerProject1('kmem', 'Kmem: Fast memory for Kotlin Common (JVM and JS) using Buffers and Typed Arrays')
registerProject1('korinject', 'Korinject: Portable Kotlin Common library to do asynchronous dependency injection')

// First layer
registerProject1('korio', 'Korio: Kotlin cORoutines I/O : Streams + Async TCP Client/Server + Virtual File System for JVM, Node.JS and Browser')
registerProject2('korio-ktor-ext', 'korio', 'Korio-Ktor integration')
registerProject1('korma', 'Korma: Math Utilities for Kotlin Common')

registerProject1('korim', 'Kotlin cORoutines IMaging utilities for Kotlin Common')

registerProject1('korau', 'Korau: Kotlin cORoutines AUdio')

// Second layer
registerProject1('korag', 'Korag: Kotlin cORoutines Accelerated Graphics')

// @TODO: WIP OpenGL common implementation for all targets with GL >= 4.0 or GLES >= 2.0
registerProject2('kgl', 'korag', 'Kgl: OpenGL bindings for Kotlin')
registerProject2('korag-opengl', 'korag', 'Korag-opengl: Korag OpenGL implementation')

registerProject2('korau-mp3', 'korau', 'Korau: MP3 extension')

registerProject1('korui', 'Korui: Kotlin cORoutines User Interfaces for Kotlin Common')

// Final layer
registerProject1('korge', 'Korge: Kotlin cORoutines Game Engine')

// Extra
registerProject1('dynarek', 'Dynarek: Dynamic recompilation for Kotlin Common (JS and JVM)')
registerProject1('kbignum', 'KBigNum: Big Numbers for multiplatform Kotlin')
registerProject1('krypto', 'Krypto: Pure Kotlin cryptography library for JVM, JS and Common')
registerProject2('korim-qr', 'korim', 'Korim: QR generation extension')
registerProject2('korau-mod', 'korau', 'Korau: MOD extension (XM) and WIP (MOD,MIDI) playback')
registerProject2('korau-ogg-vorbis', 'korau', 'Korau: OGG Vorbis extension')
registerProject2('korau-atrac3plus', 'korau', 'Korau: atrac3plus extension')
//registerProject2('korau-opus', 'korau', 'Korau: opus extension')

// Adobe Flash/Animate
registerProject2('korge-ext-fla', 'korge', 'Korge: Extension for fla files')
registerProject1('korfl', 'Korfl: Parse Adobe Animate SWF files in JVM and JS')
registerProject2('korge-ext-swf', 'korge', 'Korge: Extension for SWF')

// Skeletal animations
registerProject2('korge-ext-spriter', 'korge', 'Korge: Extension for spriter')
registerProject2('korge-dragonbones', 'korge', 'Korge: Extension for dragonbones')

// KSDL
//registerVersion('ksdl', 'korui/ksdl')

// Deprecated (@old folder)
//registerProject1('korte', 'Korte: Asynchronous Template Engine for Kotlin')
//registerProject1('kmedialayer', 'Kmedialayer: Portable layer for multimedia applications')
//registerProject2Jvm('kmedialayer-generator', 'kmedialayer', 'Kmedialayer generator')
